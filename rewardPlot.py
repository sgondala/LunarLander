import pickle
import numpy as np 
import matplotlib.pyplot as plt

######################################

# Plot of scores per episode

######################################

# rewards = pickle.load(open("rewardsActual/LunarLander-rewardsfinal", 'rb'))
# plt.plot(rewards[len(rewards)-100:])
# plt.ylabel("Scores per episode")
# plt.xlabel("Last 100 episodes")

# plt.show()

######################################

# Plot of mean scores per 100 episodes

######################################

# Alpha plot

# p001 = pickle.load(open("Alpha0.001/rewards/LunarLander-meanScore4000", 'rb'))
# p005 = pickle.load(open("rewardsActual/LunarLander-meanScoreFinal", 'rb'))
# p1 = pickle.load(open("Alpha0.1/rewards/LunarLander-meanScore4000", 'rb'))
# p3 = pickle.load(open("Alpha0.3/rewards/LunarLander-meanScore4000", 'rb'))

# g001, = plt.plot(p001[1:])
# g005, = plt.plot(p005[1:])
# g1, = plt.plot(p1[1:])
# g3, = plt.plot(p3[1:])

# plt.ylabel("Mean Scores per 100 episodes")
# plt.xlabel("Episode Number/100")
# plt.legend([g001, g005, g1, g3], ['Alpha = 0.001', 'Alpha = 0.005', 'Alpha = 0.1', 'Alpha = 0.3'])
# plt.show()


######################################

# Gamma plot

p095 = pickle.load(open("rewardsGamma095/LunarLander-meanScore4000", 'rb'))
p099 = pickle.load(open("rewardsActual/LunarLander-meanScoreFinal", 'rb'))
p1 = pickle.load(open("rewards/LunarLander-meanScore4000", 'rb'))
# p3 = pickle.load(open("Alpha0.3/rewards/LunarLander-meanScore4000", 'rb'))

g095, = plt.plot(p095[1:])
g099, = plt.plot(p099[1:])
g1, = plt.plot(p1[1:])
# g3, = plt.plot(p3[1:])

plt.ylabel("Mean Scores per 100 episodes")
plt.xlabel("Episode Number/100")
plt.legend([g095, g099, g1], ['Gamma = 0.95', 'Gamma = 0.99', 'Gamma = 1'])
plt.show()


######################################



# Test plot

######################################

# Score values computed from reinforce_tf.py
# scoreValues = [177.20893644549528, 227.11498985462242, 210.8730193117129, 182.78548137035654, 203.73613300873762, 228.02341954935335, 91.38930058767934, 240.75476587597646, 199.17862973294535, 212.74960721619289, 180.5940117600087, 176.81580630166638, 217.5839050456109, 11.948457441869607, 105.26114891024068, 253.08401688969408, 244.794829816941, 217.08777680709, 197.20239653775445, 227.12727217129935, 225.47011454712268, 195.76307326134594, 210.23529333254135, 203.98442149892423, 122.13267950576389, 234.4892407710917, 227.14163675598098, 224.47307036838697, 193.87643640378167, 223.762390144906, 190.09124408117088, 226.47990609210618, 200.90617431917354, 157.8458679691949, 200.61932199253258, 218.69599627774014, 258.89229842010667, 179.165990170431, 244.66838276855157, 238.8710481369316, 163.91089073830136, 173.35025034710014, 190.90855714394235, 203.3479770604945, 218.90579035444904, 234.76932806301988, 191.1012627188577, 194.50342982472657, 124.41243380091939, 186.37629995198182, 95.82664942560581, 238.64189854872632, 181.88972100536006, 205.60094988286252, 184.90859038932888, 195.47957995342333, 228.59394994415814, 181.0275930095277, 224.44765932502628, 211.33661676173688, 202.26000337135218, -17.326101692768844, 193.92018028165637, 234.0322216082809, 213.39400987926194, 219.9583874001043, 232.9565572094364, 243.32449883043776, 205.98098805015667, -26.452681727629198, 229.01876128687084, 236.0480834908987, 212.88750692132658, 210.30514030433565, 173.93023460503807, 206.03270443147747, -124.15026208989615, 213.58655109735446, 207.2831281347606, 184.32551476417564, 225.89304995286648, 123.55188401233117, 210.02135117971346, 203.75792517766877, 205.99366705816266, 181.78363168526667, 194.45325298880357, 190.14361095630454, -42.064455098974946, 200.1618011927353, 184.38592818469223, 145.00247248866498, -72.04414495116634, 251.72948594457205, 218.83241790139857, 209.38262833694492, 230.73772586190944, 172.31894304048595, 194.47180453156153, 242.16648261715858]
# accuracy = 0
# for i in scoreValues:
# 	if i >= 200:
# 		accuracy += 1
# print(accuracy)
# print(np.mean(scoreValues))
# print(scoreValues)
# plt.plot(scoreValues)
# plt.ylabel("Scores per each trial during Test")
# plt.xlabel("100 test trails")

# plt.show()
